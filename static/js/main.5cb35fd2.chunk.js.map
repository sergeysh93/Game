{"version":3,"sources":["Consts.js","components/Controls/Controls.js","containers/Controls/Controls.js","components/Sector/Sector.js","containers/Sector/Sector.js","components/Board/Board.js","containers/Board/Board.js","components/Timer/Timer.js","containers/Timer/Timer.js","App.js","serviceWorker.js","index.js"],"names":["DEFAULT_SIZE","DEFAULT_COLORS","Controls","props","react_default","a","createElement","ruleText","inputs","className","onChange","handleLevelChange","type","name","value","level","title","min","max","step","leaderboard","Fragment","curCategory","id","onClick","handleStart","handleCategoryClick","ControlsContainer","state","_this","bind","Object","assertThisInitialized","this","startGame","e","console","log","target","setState","parseInt","isNaN","components_Controls_Controls","React","Component","colors","0","1","2","3","4","Sector","style","backgroundColor","color","width","size","height","handleClick","onContextMenu","SectorContainer","clickHandler","nextProps","orient","nativeEvent","which","x","y","preventDefault","components_Sector_Sector","Board","board","toRender","i","j","push","containers_Sector_Sector","key","dirs","generateBoard","newBoard","Array","checkBoard","Math","floor","random","recolorPoint","gx","gy","positive","length","BoardContainer","locked","startTime","finishGame","toConsumableArray","components_Board_Board","Timer","t","timer","formattedTime","h","m","s","ms","TimerContainer","time","curTimer","Date","now","start","_this2","timerID","setInterval","tick","clearInterval","startTimer","nextState","freeze","stopTimer","components_Timer_Timer","App","inProgress","containers_Controls_Controls","containers_Timer_Timer","containers_Board_Board","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5cb35fd2.chunk.js","sourcesContent":["export const DEFAULT_SIZE = 3;\nexport const MAX_SIZE = 15;\nexport const DEFAULT_COLORS = 2;\nexport const MAX_COLORS = 3;\nexport const MAX_LEVEL = (MAX_COLORS - 1) * (MAX_SIZE - 2) + MAX_COLORS - 1 ;\n","import React from 'react';\nimport PropTypes from 'prop-types'\nimport './Controls.css';\nimport {MAX_LEVEL} from '../../Consts'\n\nconst Controls = (props) => {\n  const ruleTextEng = \n    <div>\n      Clicking on a square recolors all squares on it's horizontal and vertical lanes. Goal is to make all squares the same colored.\n    </div>\n    const ruleText = \n    <div>\n      Клик по каждому квадрату перекрашивает все клетки, находящиеся на одной горизонтальной или вертикальной линии с ним. Задача - покрасить всё поле в один цвет\n    </div>\n  const inputs = \n    <form>\n      <label>Уровень:</label>\n      <input className='controls-content__input' onChange={props.handleLevelChange} type=\"number\" name=\"level\" value={props.level} title={'1 - '+ MAX_LEVEL}/>\n      <input className='controls-content__input' onChange={props.handleLevelChange} type=\"range\" name=\"level\" min=\"1\" max={MAX_LEVEL} step=\"1\" value={props.level} title={'1 - '+ MAX_LEVEL}/>\n    </form>\n  const leaderboard = \n    <div className='leaderboard'>\n      placeholder\n    </div>\n  \n  return (\n    <>\n      <div className='container controls'>\n        <ul className='row list-group list-group-horizontal controls-list'>\n          <li className={'col-12 col-md-3 list-group-item'+ (props.curCategory === 'controls0' ? ' active' : '')} id='controls0' onClick={props.handleStart}>Новая игра</li>\n          <li className={'col-12 col-md-3 list-group-item'+ (props.curCategory === 'controls1' ? ' active' : '')} id='controls1' onClick={props.handleCategoryClick}>Таблица лидеров</li>\n          <li className={'col-12 col-md-3 list-group-item'+ (props.curCategory === 'controls2' ? ' active' : '')} id='controls2' onClick={props.handleCategoryClick}>Правила</li>\n          <li className={'col-12 col-md-3 list-group-item'+ (props.curCategory === 'controls3' ? ' active' : '')} id='controls3' onClick={props.handleCategoryClick}>Сложность</li>\n        </ul>\n      </div>\n      {props.curCategory !== '' && \n        <div className='controls-content'>\n          {props.curCategory === 'controls1' && leaderboard}\n          {props.curCategory === 'controls2' && ruleText}\n          {props.curCategory === 'controls3' && inputs}\n        </div>\n      }\n    </>\n  )\n}\n\nControls.propTypes = {\n  handleCategoryClick: PropTypes.func.isRequired,\n  handleStart: PropTypes.func.isRequired,\n  handleLevelChange: PropTypes.func.isRequired,\n  level: PropTypes.number.isRequired,\n  curCategory: PropTypes.string.isRequired\n}\n\nexport default Controls","import React from 'react';\nimport PropTypes from 'prop-types'\nimport Contols from '../../components/Controls/Controls'\nimport {MAX_LEVEL} from '../../Consts'\n\nclass ControlsContainer extends React.Component {\n  state = {\n    // leaderboard, rules, diff\n    curCategory: 'controls2'\n  }\n  handleStart = this.handleStart.bind(this)\n  handleLevelChange = this.handleLevelChange.bind(this)\n  handleCategoryClick = this.handleCategoryClick.bind(this)\n  \n  getLeaderboard(){\n\n  }\n  updateLeaderboard(){\n\n  }\n  handleStart(){\n    this.props.startGame(this.props.level)\n  }\n  handleCategoryClick(e){\n    console.log(e.target.id);\n    this.setState({\n      curCategory: this.state.curCategory === e.target.id ? '' : e.target.id\n    })\n  }\n  handleLevelChange(e){\n    const level = parseInt(e.target.value, 10)\n    if (isNaN(level)){\n      return\n    }\n    if (level > 0 && level <= MAX_LEVEL){\n      this.props.startGame(e.target.value)\n    }\n  }\n  render(){\n    return <Contols \n      handleCategoryClick={this.handleCategoryClick}\n      handleStart={this.handleStart}\n      handleLevelChange={this.handleLevelChange}\n      level={this.props.level}\n      curCategory={this.state.curCategory}\n    />\n  }\n}\n\nControlsContainer.propTypes = {\n  startGame: PropTypes.func.isRequired,\n  level: PropTypes.number.isRequired\n}\n\nexport default ControlsContainer","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './Sector.css'\n/*\norient:0\n\n**0**\n**0**\n00000\n**0**\n**0**\n\norient:1\n\n0***0\n*0*0*\n**0**\n*0*0*\n0***0\n\n*/\n\nconst colors = {\n  0: '#A43D94',\n  1: '#717DD7',\n  2: '#00B945',\n  3: 'blue',\n  4: 'purple'\n}\n\n\nconst Sector = (props) => {\n    const style = {\n      backgroundColor: colors[props.color],\n      width: (100/props.size)+'%',\n      height: (100/props.size)+'%'\n    }\n    return (\n    <div className='sector'onClick={props.handleClick} onContextMenu={props.handleClick} style={style}></div>\n  )\n}\n\nSector.propTypes = {\n  handleClick: PropTypes.func.isRequired,\n  color: PropTypes.number.isRequired,\n  orient: PropTypes.number.isRequired,\n  size: PropTypes.number.isRequired\n}\n\nexport default Sector","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Sector from '../../components/Sector/Sector'\n\nclass SectorContainer extends React.Component {\n\n  clickHandler = this.clickHandler.bind(this);\n\n  shouldComponentUpdate(nextProps){\n    return (this.props.color !== nextProps.color ||\n      this.props.orient !== nextProps.orient ||\n      this.props.size !== nextProps.size\n      )\n  }\n  clickHandler(e){\n    if (e.nativeEvent.which === 1) {\n      this.props.handleClick(this.props.x, this.props.y, true)\n    } else if (e.nativeEvent.which === 3) {\n      this.props.handleClick(this.props.x, this.props.y, false)\n    }\n    e.preventDefault()\n  }\n  render(){\n    return <Sector \n      handleClick={this.clickHandler}\n      color={this.props.color}\n      orient={this.props.orient}\n      size={this.props.size}\n    />\n  }\n}\n\nSectorContainer.propTypes = {\n  handleClick: PropTypes.func.isRequired,\n  x: PropTypes.number.isRequired,\n  y: PropTypes.number.isRequired,\n  color: PropTypes.number.isRequired,\n  orient: PropTypes.number.isRequired,\n  size: PropTypes.number.isRequired\n}\nexport default SectorContainer","import React from 'react'\nimport PropTypes from 'prop-types'\nimport SectorContainer from '../../containers/Sector/Sector'\n\nimport './Board.css'\nconst Board = (props) => {\n    const {size, board} = props\n    var toRender = [];\n    for (let i = 0; i < size; i++){\n      for (let j = 0; j < size; j++){\n        toRender.push(\n        <SectorContainer \n          key={i*size+j}\n          handleClick={props.handleClick}\n          x={i}\n          y={j}\n          color={board[i][j].color}\n          orient={board[i][j].orient}\n          size={size}\n        />\n        )\n      }\n    }\n    return (\n    <div className='container board'>\n      {toRender}\n    </div>\n  )\n}\nBoard.propTypes = {\n  handleClick: PropTypes.func.isRequired,\n  board: PropTypes.arrayOf(\n    PropTypes.arrayOf(\n      PropTypes.shape({\n        color: PropTypes.number.isRequired,\n        orient: PropTypes.number.isRequired\n      }\n      )\n    )\n  ).isRequired,\n  size: PropTypes.number.isRequired\n}\n\n\nexport default Board","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Board from '../../components/Board/Board'\n\n//clockwise directions\nconst dirs = [\n  [0,-1],[1,-1],[1,0],[1,1],[0,1],[-1,1],[-1,0],[-1,-1]\n]\n\nconst generateBoard = (size,colors) => {\n  var newBoard = new Array(size);\n  for (let i = 0; i < size; i++){\n    newBoard[i] = new Array(size);\n    for (let j = 0; j < size; j++){\n      newBoard[i][j] = {\n        color: 0, //Math.floor(Math.random()*(colors)),\n        orient: 0 //Math.floor(Math.random()*(2))     -- Diagonal points\n      }\n    }\n  }\n  let i = 0;\n  while (i < size*size || checkBoard(newBoard)){\n    let x = Math.floor(Math.random()*(size));\n    let y = Math.floor(Math.random()*(size));\n    recolorPoint(newBoard,colors,x,y,true);\n    i++;\n  }\n  return newBoard;\n}\nconst recolorPoint = (board, colors, gx, gy, positive) => {\n  const size = board[0].length\n  board[gx][gy].color = (board[gx][gy].color + (positive ? 1 : colors - 1)) % colors;\n  for (let i = 0; i < dirs.length; i++){\n    let x = gx, y = gy;\n    //0 - rook, 1 - bishop\n    if (i % 2 === board[gx][gy].orient % 2) {\n      while ((x + dirs[i][0] >= 0)  && (x + dirs[i][0] < size) && (y + dirs[i][1] >= 0)  && (y + dirs[i][1] < size)){\n        x += dirs[i][0];\n        y += dirs[i][1];\n        board[x][y].color = (board[x][y].color + (positive ? 1 : colors - 1)) % colors;\n      }\n    }\n  }\n  return board\n}\n\nconst checkBoard = (board) => {\n  const size = board[0].length\n  for (let i = 0; i < size; i++){\n    for (let j = 0; j < size; j++){\n      if (board[i][j].color !== board[0][0].color) {\n        return false\n      }\n    }\n  }\n  return true\n}\n\nclass BoardContainer extends React.Component {\n  state = {\n    board: generateBoard(this.props.size,this.props.colors),\n    locked: false\n  }\n  handleClick = this.handleClick.bind(this);\n\n  shouldComponentUpdate(nextProps){\n    if (this.props.startTime !== nextProps.startTime || \n      nextProps.size !== this.props.size || \n      nextProps.colors !== this.props.colors){\n      this.setState({\n        board: generateBoard(nextProps.size,nextProps.colors),\n        locked: false\n      })\n      return false\n    }\n    return true\n  }\n  componentDidUpdate(){\n    if (!this.state.locked){\n      if (checkBoard(this.state.board)){\n        this.props.finishGame();\n        this.setState({locked: true})\n      } \n    }\n  }\n\n  handleClick(x,y,positive){\n    if (!this.state.locked){\n      let board = [...this.state.board]\n      recolorPoint(board,this.props.colors, x,y,positive);\n      this.setState({board: board})\n    }\n  }\n   \n  render(){\n    return <Board\n      handleClick={this.handleClick}\n      board={this.state.board}\n      size={this.props.size}\n    />\n  }\n}\n\nBoardContainer.propTypes = {\n  finishGame: PropTypes.func.isRequired,\n  startTime: PropTypes.number.isRequired,\n  colors: PropTypes.number.isRequired,\n  size: PropTypes.number.isRequired\n}\n\n\nexport default BoardContainer","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './Timer.css'\n\nconst Timer = (props) => {\n  const t = props.timer;\n  var formattedTime = (t.h>0 ? t.h+'h ' : '') + \n  (t.m>0 ? t.m+'m ' : '') +\n  t.s + '.'+ t.ms + 's'\n\n  return (\n    <div className='container-fluid'>\n      <div className='timer'>\n        Time: {formattedTime}\n      </div>\n    </div>\n  )\n}\n\nTimer.propTypes = {\n  timer: PropTypes.shape({\n    h: PropTypes.number.isRequired,\n    m: PropTypes.number.isRequired,\n    s: PropTypes.number.isRequired,\n    ms: PropTypes.number.isRequired\n  }\n  ).isRequired,\n}\n\nexport default Timer","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Timer from '../../components/Timer/Timer'\n\nclass TimerContainer extends React.Component {\n  state = {\n    time: this.curTimer(),\n  }\n  curTimer(){\n    let t = Date.now() - this.props.start\n    let obj = {\n      h:  Math.floor(t / 3600000),\n      m:  Math.floor((t % 3600000) / 60000),\n      s:  Math.floor((t % 60000) / 1000),\n      ms: Math.floor((t % 1000)/100)\n    }\n    return obj\n  }\n  startTimer(){\n    this.timerID = setInterval(\n      () => this.tick(),\n      100\n    );\n  }\n  stopTimer(){\n    clearInterval(this.timerID)\n  }\n  componentDidMount(){\n    this.startTimer()\n  }\n  tick() {\n    this.setState({\n      time: this.curTimer()\n    });\n  }\n\n  shouldComponentUpdate(nextProps,nextState){\n    if (nextProps.freeze) {\n      this.stopTimer()\n    }\n    if (this.props.freeze && !nextProps.freeze){\n      this.startTimer()\n    }\n    return !nextProps.freeze\n  }\n  render(){\n    //console.log('render', this.state, this.props);\n    \n    return <Timer \n      timer={this.state.time}\n    />\n  }\n}\n\nTimerContainer.propTypes = {\n  start: PropTypes.number.isRequired,\n  freeze: PropTypes.bool.isRequired\n}\n\nexport default TimerContainer","import React from 'react';\nimport './App.css';\nimport ControlsContainer from './containers/Controls/Controls';\nimport BoardContainer from './containers/Board/Board';\nimport TimerContainer from './containers/Timer/Timer'\nimport {DEFAULT_SIZE,DEFAULT_COLORS,MAX_COLORS,MAX_SIZE} from './Consts'\n\n\nclass App extends React.Component {\n  state = {\n    level: (DEFAULT_COLORS - 2) * DEFAULT_SIZE + DEFAULT_COLORS - 1, \n    size: DEFAULT_SIZE,\n    colors: DEFAULT_COLORS,\n    inProgress: true,\n    startTime: Date.now()\n  }\n  startGame = this.startGame.bind(this)\n  finishGame = this.finishGame.bind(this)\n  \n  startGame(level){\n    this.setState({\n      level: level,\n      size: Math.floor((level-1) / (MAX_COLORS - 1)) + 3,\n      colors: (level-1) % (MAX_COLORS - 1) + 2,\n      inProgress: true,\n      startTime: Date.now()\n    })\n  }\n\n  finishGame(){\n    this.setState({inProgress: false})\n  }\n  render(){\n    const size = this.state.size < MAX_SIZE ? this.state.size : MAX_SIZE\n    const colors = this.state.colors < MAX_COLORS ? this.state.colors : MAX_COLORS\n    return (\n    <div className=\"App\">\n      <ControlsContainer\n        startGame={this.startGame}\n        level={this.state.level}\n      />\n      <TimerContainer \n        start={this.state.startTime}\n        freeze={!this.state.inProgress}\n      />\n      <BoardContainer\n        finishGame={this.finishGame}\n        startTime={this.state.startTime}\n        colors={colors}\n        size={size}\n      />\n    </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}